{
  "name": "wait and advance",
  "id": "2f63bc08-de32-4fdb-bd76-ff5f64026b56",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "Order Completed?",
      "id": "887581af-2a18-41bc-8cb0-105d52b42998",
      "type": "selector",
      "subtrees": [
        {
          "name": "Succeed",
          "id": "ea4709da-4d92-4b7c-9748-653b0d456fa9",
          "type": "success",
          "decorators": [
            {
              "id": "7a228581-3f7f-4bd6-a4f9-ac7864f7c542",
              "type": "scriptCondition",
              "name": "Ordert Completed?",
              "script": [
                "return loc.orderCompleted ~= nil and loc.orderCompleted == true"
              ]
            }
          ]
        },
        {
          "name": "someone is alive?",
          "id": "da94f6e9-1953-46a7-a8a6-d92420ad40c9",
          "type": "selector",
          "subtrees": [
            {
              "name": "Wait Forever",
              "id": "a081bed9-7910-4ddf-8f90-9242015b130d",
              "type": "waitForever",
              "decorators": [
                {
                  "id": "1e3c8cd0-ff0f-45d5-af34-081c99c4d0d4",
                  "type": "scriptCondition",
                  "name": "?found leader?",
                  "script": [
                    "--[[ if loc.foundLeader ~= nil and loc.foundLeader:IsAlive() then",
                    "    return",
                    "end--]]",
                    "",
                    "-- try to find an alive solider",
                    "loc.foundLeader = nil",
                    "local leaderCandidate = nil",
                    "",
                    "-- iterate over the teams",
                    "local fireTeamCount = self:GetChildGroupCount()",
                    "for i=1,fireTeamCount do    ",
                    "    local iGroup = self:GetChildGroup(i-1)",
                    "",
                    "    -- try and get group leader",
                    "    leaderCandidate = iGroup:GetLeader()",
                    "    if leaderCandidate:IsAlive() then",
                    "       loc.foundLeaderGroup = iGroup",
                    "       loc.foundLeader = leaderCandidate",
                    "       break ",
                    "    end",
                    "",
                    "    -- if group leader is dead",
                    "    -- iterate over the soliders and try to find an alive one",
                    "    local soliderCount = iGroup:GetChildGroupCount()",
                    "    for s=1,soliderCount do",
                    "        leaderCandidate = iGroup:GetChildGroup(i-1)",
                    "        if leaderCandidate:IsAlive() then",
                    "            loc.foundLeaderGroup = iGroup",
                    "            loc.foundLeader = leaderCandidate",
                    "            break ",
                    "        end",
                    "    end",
                    "",
                    "    -- noone alive, try again for next fire team    ",
                    "end",
                    "",
                    "if loc.foundLeader == nil then",
                    "    return false",
                    "else",
                    "    return true",
                    "end"
                  ]
                }
              ]
            },
            {
              "name": "Fail",
              "id": "91f75bf4-774f-49a8-a256-aa9f16e2bc6c",
              "type": "fail"
            }
          ],
          "active": true
        }
      ],
      "active": true
    },
    {
      "name": "If Data Valid table",
      "id": "a10e69f8-93da-484e-8f1d-12346a715f9b",
      "type": "selector",
      "subtrees": [
        {
          "name": "Set Up Data Valid Table",
          "id": "47760c95-811b-4fcd-9555-0876c118521f",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "3009788e-bff3-43b3-b7fa-0193e33b1774",
              "type": "scriptCondition",
              "name": "No Valid Table",
              "script": [
                "return loc.dataValidTable == nil"
              ]
            }
          ],
          "script": [
            "loc.dataValidTable = {}",
            "loc.dataValidTable[\"teams\"] = false",
            "loc.dataValidTable[\"path\"] = false",
            "loc.dataValidTable[\"controlPoints\"] = false",
            "loc.dataValidTable[\"orders\"] = false",
            "",
            "DebugLog(\"Valid Table Set Up\")"
          ]
        },
        {
          "name": "If team data",
          "id": "a28e6cd2-d483-4de1-8da9-03fc13c93efd",
          "type": "selector",
          "subtrees": [
            {
              "name": "Set Up Team Data",
              "id": "d5a8f45f-82fc-4090-a05b-4a873ee45920",
              "type": "scriptAction",
              "decorators": [
                {
                  "id": "686278f5-3d75-4759-a97c-cf4fdbb04de1",
                  "type": "scriptCondition",
                  "name": "Not Team Data",
                  "script": [
                    "return loc.dataValidTable[\"teams\"] ==false"
                  ]
                }
              ],
              "script": [
                "loc.aliveFireTeams = {}",
                "loc.aliveFireTeams[1] = loc.foundLeaderGroup",
                "-- iterate over the teams",
                "local teamIndex = 2;",
                "local fireTeamCount = self:GetChildGroupCount()",
                "for i=1,fireTeamCount do    ",
                "    local iGroup = self:GetChildGroup(i-1)",
                "",
                "    if iGroup ~= loc.foundLeaderGroup then",
                "         -- iterate over the soliders and try to find an alive one",
                "        local anyOneAlive = false",
                "        local soliderCount = iGroup:GetChildGroupCount()",
                "        local foundSolider = nil",
                "        for s=1,soliderCount do",
                "            foundSolider = iGroup:GetChildGroup(i)",
                "            if foundSolider:IsAlive() then",
                "                anyOneAlive = true",
                "                break ",
                "            end",
                "        end",
                "",
                "        -- if someone is alive, we add them to our found fire teams",
                "        loc.aliveFireTeams[teamIndex] = iGroup",
                "        teamIndex = teamIndex + 1",
                "    end   ",
                "end",
                "",
                "-- set team data to valid",
                "loc.dataValidTable[\"teams\"] = true",
                "DebugLog(\"Teams Set Up\")"
              ]
            },
            {
              "name": "If path data",
              "id": "250000ce-93b0-4b68-93db-84459a7db542",
              "type": "selector",
              "subtrees": [
                {
                  "name": "Wait to Find Path",
                  "id": "ec4b20ec-9ef8-49d6-a3c9-38ffbcd26728",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "Ask for Path",
                      "id": "05d38b85-d666-4c97-823b-24ee816487e0",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "8e5989ee-b572-4952-ba89-525e6bd904e0",
                          "type": "waitUntil",
                          "name": "Wait Until Destination Given",
                          "condition": [
                            "return arg.orderData.destination ~= nil"
                          ]
                        }
                      ],
                      "script": [
                        "loc.pathQuery = FindPath(loc.foundLeader:GetPosition(), arg.orderData.destination)"
                      ]
                    },
                    {
                      "name": "Save Found Path",
                      "id": "edd0e148-4e55-4a90-ac71-e34fd856549d",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "d6ffec0e-d8f4-4b8f-a971-c09465c9bab8",
                          "type": "waitUntil",
                          "name": "Wait Until Path Ready",
                          "condition": [
                            "return loc.pathQuery:IsReady()"
                          ]
                        }
                      ],
                      "script": [
                        "loc.path = loc.pathQuery:Value()",
                        "loc.pathQuery = nil",
                        "",
                        "loc.dataValidTable[\"path\"] = true",
                        "DebugLog(\"Path Set Up\")"
                      ]
                    }
                  ],
                  "decorators": [
                    {
                      "id": "33a66493-2ed0-4a71-a0bd-b552c974819a",
                      "type": "scriptCondition",
                      "name": "No Path",
                      "script": [
                        "return loc.dataValidTable[\"path\"] ==false"
                      ]
                    }
                  ]
                },
                {
                  "name": "If control points data",
                  "id": "c674bd69-f639-4440-953f-d8b03a77b0bc",
                  "type": "selector",
                  "subtrees": [
                    {
                      "name": "Set Up PathPoints",
                      "id": "1221f95b-0654-4b1c-9f4a-b8f4c7f2e69c",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "a8f3e9e1-a3ab-474d-8c30-f06f23af70d3",
                          "type": "scriptCondition",
                          "name": "if path exists and NO control points",
                          "script": [
                            "if loc.path ~= nil and loc.dataValidTable[\"path\"] == true and loc.dataValidTable[\"controlPoints\"] == false then",
                            "    return true",
                            "end",
                            "return false"
                          ]
                        }
                      ],
                      "script": [
                        "loc.controlPoints = {}",
                        "",
                        "local pathLen = loc.path:Length()",
                        "local segmentCount = math.floor(pathLen / loc.controlPointDistance)",
                        "",
                        "if segmentCount < 1 then ",
                        "    loc.controlPoints[1] = arg.orderData.destination",
                        "    loc.dataValidTable[\"controlPoints\"] = true",
                        "    DebugLog(\"Path Points Set Up\")",
                        "    return",
                        "end",
                        "",
                        "for iSeg=1,segmentCount do",
                        "    local newPoint = loc.path:PositionAlongPath(loc.controlPointDistance*iSeg)",
                        "    loc.controlPoints[iSeg] = newPoint",
                        "end",
                        "",
                        "if loc.controlPoints[segmentCount]:Distance(arg.orderData.destination) > loc.controlPointDistance/2 then",
                        "   loc.controlPoints[segmentCount+1] = arg.orderData.destination",
                        "else",
                        "   loc.controlPoints[segmentCount] = arg.orderData.destination",
                        "end",
                        "",
                        "loc.dataValidTable[\"controlPoints\"] = true",
                        "DebugLog(\"Path Points Set Up\")"
                      ]
                    },
                    {
                      "name": "If orders and index data",
                      "id": "f40efbab-f390-41bb-9dfa-5c52feb8d0eb",
                      "type": "selector",
                      "subtrees": [
                        {
                          "name": "Set Up Orders",
                          "id": "82764376-d9fb-48ce-ad66-f93568d2df2a",
                          "type": "scriptAction",
                          "decorators": [
                            {
                              "id": "58c54b6f-3398-4949-be09-69b8122c79f9",
                              "type": "scriptCondition",
                              "name": "no order data",
                              "script": [
                                "return loc.dataValidTable[\"orders\"] == false"
                              ]
                            }
                          ],
                          "script": [
                            "-- Initialize variables",
                            "local teamIndex = 1 -- To iterate over aliveFireTeams cyclically",
                            "local orderIndex = 1 -- To keep track of the index in preparedOrders",
                            "loc.preparedOrders = {}",
                            "",
                            "-- Iterate over all controlPoints",
                            "for _, controlPoint in ipairs(loc.controlPoints) do",
                            "    -- Prepare an order for the current controlPoint",
                            "    local preparedOrder = {}",
                            "",
                            "    -- Set up subOrderData for the Advance order",
                            "    preparedOrder[\"subOrderData\"] = {",
                            "        orderName = \"Advance\",",
                            "        destination = controlPoint",
                            "    }",
                            "",
                            "    -- Assign the current fire team to the order",
                            "    local currentTeam = loc.aliveFireTeams[teamIndex]",
                            "    preparedOrder[\"subordinates\"] = {currentTeam}",
                            "",
                            "    -- Set subordinateData to an empty table",
                            "    preparedOrder[\"subordinateData\"] = {}",
                            "",
                            "    -- Store the prepared order into loc.preparedOrders",
                            "    loc.preparedOrders[orderIndex] = preparedOrder",
                            "    orderIndex = orderIndex + 1",
                            "",
                            "    -- Move to the next team in a cyclic manner",
                            "    teamIndex = teamIndex + 1",
                            "    if teamIndex > #loc.aliveFireTeams then",
                            "        teamIndex = 1 -- Loop back to the first team",
                            "    end",
                            "end",
                            "",
                            "-- send an order to the following teams to reach the end",
                            "local finalControlPoint = loc.controlPoints[#loc.controlPoints]",
                            "for i = 1, #loc.aliveFireTeams - 1 do",
                            "    local preparedOrder = {}",
                            "    -- Set up subOrderData for the Advance order",
                            "    preparedOrder[\"subOrderData\"] = {",
                            "        orderName = \"Advance\",",
                            "        destination = finalControlPoint",
                            "    }",
                            "    -- Assign the current fire team to the order",
                            "    local currentTeam = loc.aliveFireTeams[teamIndex]",
                            "    preparedOrder[\"subordinates\"] = {currentTeam}",
                            "    -- Set subordinateData to an empty table",
                            "    preparedOrder[\"subordinateData\"] = {}",
                            "",
                            "    -- Store the prepared order into loc.preparedOrders",
                            "    loc.preparedOrders[orderIndex] = preparedOrder",
                            "    orderIndex = orderIndex + 1",
                            "",
                            "    teamIndex = teamIndex + 1",
                            "    if teamIndex > #loc.aliveFireTeams then",
                            "        teamIndex = 1 -- Loop back to the first team",
                            "    end",
                            "end",
                            "",
                            "-- Set loc.orderToPerformIndex to 1",
                            "loc.orderToPerformIndex = 1",
                            "",
                            "-- Set loc.maxOrderIndex to the total number of prepared orders",
                            "loc.maxOrderIndex = orderIndex - 1",
                            "",
                            "-- Debug print for verification (remove in production)",
                            "for i, order in ipairs(loc.preparedOrders) do",
                            "    DebugLog(\"Order \" .. i .. \":\")",
                            "    DebugLog(\"  Order Name: \" .. order.subOrderData.orderName)",
                            "    DebugLog(\"  Destination: \" .. order.subOrderData.destination)",
                            "    DebugLog(\"  Subordinates: \" .. table.concat(order.subordinates, \", \"))",
                            "end",
                            "",
                            "-- Print final settings",
                            "DebugLog(\"orderToPerformIndex: \" .. loc.orderToPerformIndex)",
                            "DebugLog(\"maxOrderIndex: \" .. loc.maxOrderIndex)",
                            "",
                            "",
                            "-- set validity to true",
                            "loc.dataValidTable[\"orders\"] = true",
                            "DebugLog(\"Orders Set Up\")",
                            "",
                            "",
                            "-- OLD STRUCTURE INSTRUCTIONS",
                            "-- you have a table loc.aliveFireTeams ",
                            "-- your goal is to iterate over them, so that the first order has a subordinate sent to team at index 1",
                            "-- second at index 2",
                            "-- etc.",
                            "-- once no more teams are avalable, assign to team 1 again",
                            "",
                            "-- how to assign orders:",
                            "-- go over table loc.controlPoints",
                            "-- for each point create an Advance order that has destination set to the control point and a subordinate set accordingly",
                            "-- set the subordinateData to empty as in the example",
                            "",
                            "-- then store the order into the table loc.preparedOrders",
                            "-- so first preparedOrder is at loc.preparedOrders[1] etc.",
                            "",
                            "-- also set loc.orderToPerformIndex to 1",
                            "-- set loc.maxOrderIndex accordingly"
                          ]
                        },
                        {
                          "name": "Set All Data Valid",
                          "id": "3e9599f3-8da7-4e1b-b666-fa873aef956a",
                          "type": "scriptAction",
                          "script": [
                            "loc.allDataValid = true"
                          ]
                        }
                      ],
                      "active": true
                    }
                  ],
                  "active": true
                }
              ],
              "active": true
            }
          ],
          "active": true
        }
      ],
      "decorators": [
        {
          "id": "e2c7d769-7018-4458-a829-7282f42e85e4",
          "type": "scriptAction",
          "name": "Set Not All Data Valid",
          "script": [
            "loc.allDataValid = false"
          ]
        }
      ],
      "active": true
    },
    {
      "name": "Draw current path",
      "id": "ceafd781-ca4d-4c33-9092-ceea2a693ac7",
      "type": "scriptAction",
      "decorators": [
        {
          "id": "a7145aa0-d5cb-464c-a7a7-72e139201ee3",
          "type": "loopForever",
          "name": "Draw path if exists"
        }
      ],
      "script": [
        "if",
        "    loc.path ~= nil",
        "then",
        "    local OFFSET = Vec3(0,0,2) -- draw up",
        "    ai_core_public.draw.Path( -- a package we packed, supplied by PepeAmpere",
        "        loc.path,",
        "        1, 0, 1, 1,",
        "        OFFSET",
        "    )",
        "end"
      ]
    },
    {
      "name": "Draw Control points",
      "id": "2bbe1616-6ec0-491c-8f93-a4a766793b68",
      "type": "scriptAction",
      "decorators": [
        {
          "id": "f80f77d7-6cce-48f6-92ae-9d930bcc5fc5",
          "type": "loopForever",
          "name": "Draw control points"
        }
      ],
      "script": [
        "if",
        "    loc.controlPoints ~= nil",
        "then",
        "    local OFFSET = Vec3(0,0,2) -- draw up",
        "    for i=1,#loc.controlPoints do",
        "        ai_core_public.draw.Circle( -- a package we packed, supplied by PepeAmpere",
        "                loc.controlPoints[i] + OFFSET,",
        "                1,",
        "                1, 0, 1, 1",
        "            )",
        "    end",
        "end"
      ]
    },
    {
      "name": "If All Data Ready",
      "id": "0e8f778b-ee69-410b-bc03-fafc70047ec3",
      "type": "selector",
      "subtrees": [
        {
          "name": "prepare and send order",
          "id": "0cfe8aec-4d9f-4045-9eda-c3f24c39d079",
          "type": "sequence",
          "subtrees": [
            {
              "name": "prepare order data",
              "id": "89cbc79c-f003-400b-9827-9b1d8dc63d72",
              "type": "scriptAction",
              "script": [
                "loc.subOrderData = loc.preparedOrders[loc.orderToPerformIndex][\"subOrderData\"]",
                "loc.subordinates = loc.preparedOrders[loc.orderToPerformIndex][\"subordinates\"]",
                "loc.subordinateData = loc.preparedOrders[loc.orderToPerformIndex][\"subordinateData\"]",
                "",
                "",
                "-- loc.subOrderData = {orderName = \"Advance\", destination = arg.orderData.destination}",
                "-- loc.subordinates = {loc.foundLeaderGroup}",
                "-- loc.subordinateData = {}",
                "-- loc.subordinateData = {destination = arg.orderData.destination}"
              ]
            },
            {
              "name": "Clear area for all subordinates",
              "id": "95a0a875-918d-4777-ae98-2e1c6edf09ea",
              "type": "reference",
              "target": [
                "standard_behaviors",
                "ExecuteSubordinateOrder"
              ],
              "arguments": {
                "orderData": "return loc.subOrderData",
                "subordinates": "return loc.subordinates",
                "subordinateData": "return loc.subordinateData",
                "update": "return false"
              }
            },
            {
              "name": "Increase Index",
              "id": "ab815002-566d-4eec-b3fe-0c7bae85fe1c",
              "type": "scriptAction",
              "script": [
                "loc.orderToPerformIndex = loc.orderToPerformIndex + 1"
              ]
            },
            {
              "name": "Check For Completion",
              "id": "3ee10945-4671-4ff6-aad4-a6e652b06161",
              "type": "scriptAction",
              "script": [
                "if loc.orderToPerformIndex > loc.maxOrderIndex then",
                "    loc.orderCompleted = true",
                "end"
              ]
            }
          ],
          "decorators": [
            {
              "id": "b1a8255b-f95e-41aa-a012-03688a80ebca",
              "type": "scriptCondition",
              "name": "All Data Ready? and not done",
              "script": [
                "return loc.allDataValid and loc.orderCompleted == false"
              ]
            }
          ]
        },
        {
          "name": "Wait Forever",
          "id": "f636781c-bb87-47b6-89c7-8c6b98c913bf",
          "type": "waitForever"
        }
      ],
      "active": true
    }
  ],
  "unlinked-trees": [
    {
      "name": "prepare and send order",
      "id": "763c3c20-8371-4343-a9e7-610978f21c12",
      "type": "sequence",
      "subtrees": [
        {
          "name": "prepare order data",
          "id": "11d50994-7e95-4198-ade8-185601053d1c",
          "type": "scriptAction",
          "script": [
            "loc.subOrderData = {orderName = \"Advance\", destination = arg.orderData.destination}",
            "loc.subordinates = {loc.foundLeaderGroup}",
            "loc.subordinateData = {}",
            "-- loc.subordinateData = {destination = arg.orderData.destination}"
          ]
        },
        {
          "name": "Clear area for all subordinates",
          "id": "5b947242-2a47-466a-bcb8-46aa3834398c",
          "type": "reference",
          "target": [
            "standard_behaviors",
            "ExecuteSubordinateOrder"
          ],
          "arguments": {
            "orderData": "return loc.subOrderData",
            "subordinates": "return loc.subordinates",
            "subordinateData": "return loc.subordinateData",
            "update": "return false"
          }
        }
      ],
      "meta": {
        "nodesInfo": [
          {
            "id": "763c3c20-8371-4343-a9e7-610978f21c12",
            "position": "3386.16428571429,456.167857142858"
          },
          {
            "id": "11d50994-7e95-4198-ade8-185601053d1c",
            "position": "3244.95,630.453571428572"
          },
          {
            "id": "5b947242-2a47-466a-bcb8-46aa3834398c",
            "position": "3444.95,617.953571428572"
          }
        ],
        "editorObjects": []
      }
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "2f63bc08-de32-4fdb-bd76-ff5f64026b56",
        "position": "2144.95,405.453571428572"
      },
      {
        "id": "a60a1b56-abc5-44d0-bd32-8a980ce1b107",
        "position": "3594.95,480.453571428572"
      },
      {
        "id": "79f97864-e994-47a5-92f9-e160fc332dbc",
        "position": "1319.95,742.953571428572"
      },
      {
        "id": "da77a851-beba-4696-ac9a-a1442e03773c",
        "position": "2007.45,730.453571428572"
      },
      {
        "id": "b5c05e2d-77b1-40b0-bfe6-fe12b154b749",
        "position": "2407.45,1255.45357142857"
      },
      {
        "id": "490c96aa-ed93-444b-8443-99cea72ac70d",
        "position": "407.45,617.953571428572"
      },
      {
        "id": "887581af-2a18-41bc-8cb0-105d52b42998",
        "position": "544.95,692.953571428572"
      },
      {
        "id": "ea4709da-4d92-4b7c-9748-653b0d456fa9",
        "position": "319.95,817.953571428572"
      },
      {
        "id": "da94f6e9-1953-46a7-a8a6-d92420ad40c9",
        "position": "719.95,842.953571428572"
      },
      {
        "id": "a081bed9-7910-4ddf-8f90-9242015b130d",
        "position": "582.45,967.953571428572"
      },
      {
        "id": "91f75bf4-774f-49a8-a256-aa9f16e2bc6c",
        "position": "794.95,967.953571428572"
      },
      {
        "id": "a10e69f8-93da-484e-8f1d-12346a715f9b",
        "position": "1419.95,805.453571428572"
      },
      {
        "id": "47760c95-811b-4fcd-9555-0876c118521f",
        "position": "1198.42619047619,959.396428571429"
      },
      {
        "id": "a28e6cd2-d483-4de1-8da9-03fc13c93efd",
        "position": "1557.45,1042.95357142857"
      },
      {
        "id": "d5a8f45f-82fc-4090-a05b-4a873ee45920",
        "position": "1369.95,1155.45357142857"
      },
      {
        "id": "250000ce-93b0-4b68-93db-84459a7db542",
        "position": "1793.42619047619,1217.72976190476"
      },
      {
        "id": "ec4b20ec-9ef8-49d6-a3c9-38ffbcd26728",
        "position": "1557.45,1380.45357142857"
      },
      {
        "id": "05d38b85-d666-4c97-823b-24ee816487e0",
        "position": "1469.95,1555.45357142857"
      },
      {
        "id": "edd0e148-4e55-4a90-ac71-e34fd856549d",
        "position": "1732.45,1555.45357142857"
      },
      {
        "id": "c674bd69-f639-4440-953f-d8b03a77b0bc",
        "position": "2082.45,1405.45357142857"
      },
      {
        "id": "1221f95b-0654-4b1c-9f4a-b8f4c7f2e69c",
        "position": "1969.95,1580.45357142857"
      },
      {
        "id": "f40efbab-f390-41bb-9dfa-5c52feb8d0eb",
        "position": "2381.72619047619,1630.80003607504"
      },
      {
        "id": "82764376-d9fb-48ce-ad66-f93568d2df2a",
        "position": "2219.95,1742.95357142857"
      },
      {
        "id": "3e9599f3-8da7-4e1b-b666-fa873aef956a",
        "position": "2644.95,1767.95357142857"
      },
      {
        "id": "ceafd781-ca4d-4c33-9092-ceea2a693ac7",
        "position": "1857.45,817.953571428572"
      },
      {
        "id": "2bbe1616-6ec0-491c-8f93-a4a766793b68",
        "position": "2069.95,817.953571428572"
      },
      {
        "id": "0e8f778b-ee69-410b-bc03-fafc70047ec3",
        "position": "2969.95,855.453571428572"
      },
      {
        "id": "0cfe8aec-4d9f-4045-9eda-c3f24c39d079",
        "position": "2757.45,1030.45357142857"
      },
      {
        "id": "89cbc79c-f003-400b-9827-9b1d8dc63d72",
        "position": "2444.95,1180.45357142857"
      },
      {
        "id": "95a0a875-918d-4777-ae98-2e1c6edf09ea",
        "position": "2682.45,1255.45357142857"
      },
      {
        "id": "ab815002-566d-4eec-b3fe-0c7bae85fe1c",
        "position": "3069.95,1192.95357142857"
      },
      {
        "id": "3ee10945-4671-4ff6-aad4-a6e652b06161",
        "position": "3319.95,1192.95357142857"
      },
      {
        "id": "f636781c-bb87-47b6-89c7-8c6b98c913bf",
        "position": "3219.95,1030.45357142857"
      }
    ],
    "editorObjects": [
      {
        "id": "a60a1b56-abc5-44d0-bd32-8a980ce1b107",
        "type": "comment",
        "header": "",
        "body": "orderData - co za order chci pustit na InfantryTeam; {orderName = \"Advance\"}\r\nsubordinates - reference na fire tymy (asi jen jeden)\r\nsubordinateData - klice jsou subordinate reference, hodnoty jsou tabulky orderData specificka kazdemu fire tymu\r\n{destination = vypoctena pozice, Vec3} \r\nhttps://manuals.bisimulations.com/VBS_Sim_SDK/VBS4-24-2/Content/VBS_Control_Editor/Behaviors_Config_Reference/standard_behaviors_InfantryTeam.htm?Highlight=InfantryTeam#behaviors_Advance\r\nupdate - tam proste dam false",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "79f97864-e994-47a5-92f9-e160fc332dbc",
        "type": "comment",
        "header": "Check if all data are valid. If not, set them up accordingly.",
        "body": "",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "da77a851-beba-4696-ac9a-a1442e03773c",
        "type": "comment",
        "header": "Debug Drawing",
        "body": "",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "b5c05e2d-77b1-40b0-bfe6-fe12b154b749",
        "type": "comment",
        "header": "Select order based on index",
        "body": "",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "490c96aa-ed93-444b-8443-99cea72ac70d",
        "type": "comment",
        "header": "Check the state of the order. Sucess if completed, fail if all dead, runnin otherwise",
        "body": "",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "4764.40714285714,2893.95357142857",
    "gridPadding": "7.45000000000005,5.45357142857171"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "controlPointDistance": "return 40",
    "dataValidTable": "return nil",
    "allDataValid": "return nil",
    "foundLeader": "return nil",
    "foundLeaderGroup": "return nil",
    "pathQuery": "return nil",
    "path": "return nil",
    "aliveFireTeams": "return nil",
    "controlPoints": "return nil",
    "preparedOrders": "return nil",
    "orderToPerformIndex": "return nil",
    "maxOrderIndex": "return nil",
    "orderCompleted": "return false",
    "subOrderData": "return nil",
    "subordinates": "return nil",
    "subordinateData": "return nil"
  }
}